/*******************************************************************************
** pattern.h (pattern settings)
*******************************************************************************/

#ifndef PATTERN_H
#define PATTERN_H

#include "bank.h"

#if 0
enum
{
  PATTERN_TIME_SIGNATURE_4_4 = 0,
  PATTERN_TIME_SIGNATURE_3_4,
  PATTERN_TIME_SIGNATURE_2_4,
  PATTERN_TIME_SIGNATURE_2_2,
  PATTERN_TIME_SIGNATURE_3_8,
  PATTERN_TIME_SIGNATURE_6_8,
  PATTERN_TIME_SIGNATURE_9_8,
  PATTERN_TIME_SIGNATURE_12_8,
  PATTERN_TIME_SIGNATURE_5_4,
  PATTERN_TIME_SIGNATURE_6_4,
  SEQUENCER_NUM_TIME_SIGNATURES
};
#endif

#define PATTERN_STEPS_PER_BEAT   4
#define PATTERN_NUM_BEATS       32 /* 4 beats per bar, 8 bars in a pattern */

#define PATTERN_NUM_STEPS (PATTERN_STEPS_PER_BEAT * PATTERN_NUM_BEATS)

#define PATTERN_NUM_DRUM_VOICES 6
#define PATTERN_NUM_INSTRUMENTS 9 /* 1 poly instrument + 8 mono instruments */

#define PATTERN_NUM_MUSIC_TEMPOS  1
#define PATTERN_NUM_MUSIC_SWINGS  (PATTERN_NUM_DRUM_VOICES + PATTERN_NUM_INSTRUMENTS)

/* pattern parameters */
#define PATTERN_BLANK -1

#define PATTERN_SWING_LOWER_BOUND 1
#define PATTERN_SWING_UPPER_BOUND 8
#define PATTERN_SWING_NUM_VALUES  (PATTERN_SWING_UPPER_BOUND - PATTERN_SWING_LOWER_BOUND + 1)

/* drum step parameters */
#define PATTERN_DRUM_NOTE_LOWER_BOUND 0
#define PATTERN_DRUM_NOTE_UPPER_BOUND 1
#define PATTERN_DRUM_NOTE_NUM_VALUES  (PATTERN_DRUM_NOTE_UPPER_BOUND - PATTERN_DRUM_NOTE_LOWER_BOUND + 1)

/* instrument step parameters */

/* there are 7 * 7 + 1 instrument notes, plus 1 more for a key-off */
#define PATTERN_INSTRUMENT_NOTE_LOWER_BOUND 1
#define PATTERN_INSTRUMENT_NOTE_UPPER_BOUND 51
#define PATTERN_INSTRUMENT_NOTE_NUM_VALUES  (PATTERN_INSTRUMENT_NOTE_UPPER_BOUND - PATTERN_INSTRUMENT_NOTE_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_KEY_LOWER_BOUND  1
#define PATTERN_INSTRUMENT_KEY_UPPER_BOUND  16
#define PATTERN_INSTRUMENT_KEY_NUM_VALUES   (PATTERN_INSTRUMENT_KEY_UPPER_BOUND - PATTERN_INSTRUMENT_KEY_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_VOLUME_LOWER_BOUND 0
#define PATTERN_INSTRUMENT_VOLUME_UPPER_BOUND 16
#define PATTERN_INSTRUMENT_VOLUME_NUM_VALUES  (PATTERN_INSTRUMENT_VOLUME_UPPER_BOUND - PATTERN_INSTRUMENT_VOLUME_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_MOD_WHEEL_LOWER_BOUND  0
#define PATTERN_INSTRUMENT_MOD_WHEEL_UPPER_BOUND  16
#define PATTERN_INSTRUMENT_MOD_WHEEL_NUM_VALUES   (PATTERN_INSTRUMENT_MOD_WHEEL_UPPER_BOUND - PATTERN_INSTRUMENT_MOD_WHEEL_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_AFTERTOUCH_LOWER_BOUND 0
#define PATTERN_INSTRUMENT_AFTERTOUCH_UPPER_BOUND 16
#define PATTERN_INSTRUMENT_AFTERTOUCH_NUM_VALUES  (PATTERN_INSTRUMENT_AFTERTOUCH_UPPER_BOUND - PATTERN_INSTRUMENT_AFTERTOUCH_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_ARP_PORTA_MODE_LOWER_BOUND 1
#define PATTERN_INSTRUMENT_ARP_PORTA_MODE_UPPER_BOUND 3
#define PATTERN_INSTRUMENT_ARP_PORTA_MODE_NUM_VALUES  (PATTERN_INSTRUMENT_ARP_PORTA_MODE_UPPER_BOUND - PATTERN_INSTRUMENT_ARP_PORTA_MODE_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_ARP_DIRECTION_LOWER_BOUND 1
#define PATTERN_INSTRUMENT_ARP_DIRECTION_UPPER_BOUND 9
#define PATTERN_INSTRUMENT_ARP_DIRECTION_NUM_VALUES  (PATTERN_INSTRUMENT_ARP_DIRECTION_UPPER_BOUND - PATTERN_INSTRUMENT_ARP_DIRECTION_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_ARP_SPEED_LOWER_BOUND  1
#define PATTERN_INSTRUMENT_ARP_SPEED_UPPER_BOUND  16
#define PATTERN_INSTRUMENT_ARP_SPEED_NUM_VALUES   (PATTERN_INSTRUMENT_ARP_SPEED_UPPER_BOUND - PATTERN_INSTRUMENT_ARP_SPEED_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_PORTA_SWITCH_LOWER_BOUND 0
#define PATTERN_INSTRUMENT_PORTA_SWITCH_UPPER_BOUND 1
#define PATTERN_INSTRUMENT_PORTA_SWITCH_NUM_VALUES  (PATTERN_INSTRUMENT_PORTA_SWITCH_UPPER_BOUND - PATTERN_INSTRUMENT_PORTA_SWITCH_LOWER_BOUND + 1)

#define PATTERN_INSTRUMENT_PORTA_SPEED_LOWER_BOUND  1
#define PATTERN_INSTRUMENT_PORTA_SPEED_UPPER_BOUND  16
#define PATTERN_INSTRUMENT_PORTA_SPEED_NUM_VALUES   (PATTERN_INSTRUMENT_PORTA_SPEED_UPPER_BOUND - PATTERN_INSTRUMENT_PORTA_SPEED_LOWER_BOUND + 1)

typedef struct drum_step
{
  char note[6];
} drum_step;

typedef struct instrument_step
{
  char note[4];
  char key;

  char volume;

  char mod_wheel_amount;
  char aftertouch_amount;

  char arp_porta_mode;
  char arp_direction_or_porta_switch;
  char arp_speed_or_porta_speed;
} instrument_step;

typedef struct pattern
{
  char tempo[PATTERN_NUM_BEATS];
  char swings[PATTERN_NUM_MUSIC_SWINGS][PATTERN_NUM_BEATS];

  drum_step       dr_steps[PATTERN_NUM_DRUM_VOICES][PATTERN_NUM_STEPS];
  instrument_step in_steps[PATTERN_NUM_INSTRUMENTS][PATTERN_NUM_STEPS];

  int   num_bars;
} pattern;

extern pattern G_pattern_bank[BANK_NUM_PATTERNS];

/* function declarations */
short int pattern_setup_all();
short int pattern_reset(int pattern_index);

#endif
